input AddToCartInput {
  itemToAdd: String!
  userId: String!
}

type CartItem {
  cartSpecificId: ID!
  item: ShopItem!
  t: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Error {
  message: String!
}

input IncrementCartItemInput {
  cartId: String!
  itemId: String!
}

input LoginType {
  email: String!
  password: String!
}

type Mutation {
  addToCart(input: AddToCartInput!): UserCart!
  checkForSession(input: SessionCheckInput!): MutationCheckForSessionResult!
  deleteFromCart(cartId: String!, itemId: String!): UserCart!
  incrementCartItem(input: IncrementCartItemInput!): CartItem!
  login(input: LoginType!): MutationLoginResult!
  register(input: UserRegisterInput!): MutationRegisterResult!
}

union MutationCheckForSessionResult = Error | MutationCheckForSessionSuccess

type MutationCheckForSessionSuccess {
  data: User!
}

union MutationLoginResult = Error | MutationLoginSuccess

type MutationLoginSuccess {
  data: User!
}

union MutationRegisterResult = Error | MutationRegisterSuccess

type MutationRegisterSuccess {
  data: User!
}

type Query {
  allCategories: [ShopCategory!]!

  """All shop items."""
  allItems: [ShopItem!]!

  """Shop items filtered by category"""
  itemByCategory(categoryId: Int!): [ShopItem!]!

  """An individual shop item obtained through ID"""
  itemById(id: Int!): ShopItem
  userCart(userId: String!): UserCart!
}

input SessionCheckInput {
  token: String
}

"""An object type for a shop category"""
type ShopCategory {
  categoryId: ID!
  categoryItems: [ShopItem!]!
  categoryName: String!
}

"""An object representing an individual shop item."""
type ShopItem {
  itemDescription: String!
  itemId: ID!
  itemImage: String!
  itemName: String!
  itemPrice: Float!
  quantity: Int!
}

"""Object type representing a user"""
type User {
  cart: [UserCart!]!
  email: String!
  id: ID!
  token: String!
}

type UserCart {
  id: ID!
  userItems: [CartItem!]!
}

input UserRegisterInput {
  email: String!
  password: String!
}